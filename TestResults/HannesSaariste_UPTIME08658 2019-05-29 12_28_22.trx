<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="c0e8d224-c1e5-46d8-8740-ac564aa1f907" name="HannesSaariste@UPTIME08658 2019-05-29 12:28:22" runUser="AzureAD\HannesSaariste" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="82f58698-f45c-4a91-a385-93496e26ddf6">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment runDeploymentRoot="HannesSaariste_UPTIME08658 2019-05-29 12_28_22">
      <DeploymentItem filename="C:\Users\HannesSaariste\source\repos\AP_Article_Web_Test\packages\Newtonsoft.Json.12.0.2\lib\net45\Newtonsoft.Json.dll" />
    </Deployment>
    <Execution hostProcessPlatform="MSIL">
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties>
      <Property name="TestSettingsUIType" value="UnitTest" />
    </Properties>
  </TestSettings>
  <Times creation="2019-05-29T12:28:22.6328861+03:00" queuing="2019-05-29T12:28:22.9019749+03:00" start="2019-05-29T12:28:22.9508477+03:00" finish="2019-05-29T12:28:44.2092362+03:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="AAArticleViewAndLoginTest Wpopulaarsedtest" storage="c:\users\hannessaariste\source\repos\ap_article_web_test\ap_article_web_test\aaarticleviewandlogintest wpopulaarsedtest.webtest" id="be3755a5-d592-4f89-a0ca-1817fa5ffeda" persistedWebTest="">
      <Execution id="ab9a1f42-f7d4-475c-bd4c-c0d5d648c7b2" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="be3755a5-d592-4f89-a0ca-1817fa5ffeda" executionId="ab9a1f42-f7d4-475c-bd4c-c0d5d648c7b2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="ab9a1f42-f7d4-475c-bd4c-c0d5d648c7b2" testId="be3755a5-d592-4f89-a0ca-1817fa5ffeda" testName="AAArticleViewAndLoginTest Wpopulaarsedtest" computerName="UPTIME08658" duration="00:00:10.4700990" startTime="2019-05-29T12:28:23.0685282+03:00" endTime="2019-05-29T12:28:44.1911343+03:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab9a1f42-f7d4-475c-bd4c-c0d5d648c7b2">
      <Output>
        <ErrorInfo>
          <Message>Web test failed by Web test code</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="AAArticleViewAndLoginTest Wpopulaarsedtest.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="82f58698-f45c-4a91-a385-93496e26ddf6">
        <Description>These are default test settings for a local test run.</Description>
        <Deployment runDeploymentRoot="HannesSaariste_UPTIME08658 2019-05-29 12_28_22">
          <DeploymentItem filename="C:\Users\HannesSaariste\source\repos\AP_Article_Web_Test\packages\Newtonsoft.Json.12.0.2\lib\net45\Newtonsoft.Json.dll" />
        </Deployment>
        <Execution hostProcessPlatform="MSIL">
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Properties>
          <Property name="TestSettingsUIType" value="UnitTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>HannesSaariste_UPTIME08658 2019-05-29 12_28_22\In\ab9a1f42-f7d4-475c-bd4c-c0d5d648c7b2\AAArticleViewAndLoginTest Wpopulaarsedtest.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>